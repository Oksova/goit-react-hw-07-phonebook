{"version":3,"sources":["components/ContactForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","redux/phonebook-selectors.jsx","redux/phonebook-actions.jsx","redux/phonebook-operations.jsx","components/Container/Container.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/phonebook-reducer.jsx","redux/store.jsx","index.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getLoader","loading","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","Container","children","className","s","container","ContactList","useSelector","dispatch","useDispatch","onDeleteContact","id","delete","then","catch","error","phonebookOperations","contactList","map","number","contact","nameText","deleteBtn","type","onClick","ContactForm","onSubmit","post","data","useState","setName","setNumber","form","e","preventDefault","namesInPhonebook","reduce","acc","numbersInPhonebook","alert","contactMatching","formLabel","formInput","placeholder","value","onChange","currentTarget","country","addBtn","Filter","filterLabel","filterInput","phonebookActions","target","App","firstRender","useRef","onFirstLoad","get","loader","useEffect","current","createReducer","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","phonebookReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.775baf96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__3jher\",\"formLabel\":\"ContactsForm_formLabel__9WNht\",\"formInput\":\"ContactsForm_formInput__2jbed\",\"addBtn\":\"ContactsForm_addBtn__3pFLN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1HV-S\",\"contact\":\"ContactList_contact__3LTyx\",\"nameText\":\"ContactList_nameText__Z3rSI\",\"deleteBtn\":\"ContactList_deleteBtn__1-ttr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__1lDi-\",\"filterInput\":\"Filter_filterInput__2XX5e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2uePF\"};","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoader = state => state.contacts.loading;\n\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest')\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess')\nexport const fetchContactsError = createAction('contacts/fetchContactsError')\n\nexport const addContactRequest = createAction('contacts/addContactRequest')\nexport const addContactSuccess = createAction('contacts/addContactSuccess')\nexport const addContactError = createAction('contacts/addContactError')\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest')\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess')\nexport const deleteContactError = createAction('contacts/deleteContactError')\n\nexport const changeFilter = createAction('contacts/changeFilter')\n","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,       \r\n} from \"./phonebook-actions\"\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest())\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(fetchContactsError(error)))\r\n    \r\n}\r\n\r\nexport const addContact = (name,number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number\r\n  }\r\ndispatch(addContactRequest());\r\naxios\r\n  .post('/contacts', contact)\r\n  .then(({ data }) => \r\n      dispatch(addContactSuccess(data))\r\n)\r\n  .catch(error => dispatch(addContactError(error)))\r\n\r\n}\r\n\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest())\r\n    \r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)))\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport s from './Container.module.css';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as phonebookOperations from '../../redux/phonebook-operations';\nimport { getVisibleContacts } from '../../redux/phonebook-selectors';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(phonebookOperations.deleteContact(id));\n  return (\n    <ul className={s.contactList}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.contact} key={id}>\n          <p className={s.nameText}>\n            {name} : {number}\n          </p>\n\n          <button\n            className={s.deleteBtn}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Удалить\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport { getContacts } from '../../redux/phonebook-selectors';\nimport * as phonebookOperations from '../../redux/phonebook-operations';\nimport s from './ContactsForm.module.css';\n\nexport default function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number) =>\n    dispatch(phonebookOperations.addContact(name, number));\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactMatching = () => {\n    const namesInPhonebook = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n\n    const numbersInPhonebook = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (\n      namesInPhonebook.includes(name) ||\n      numbersInPhonebook.includes(number)\n    ) {\n      alert(`${name}${number} is already in contacts`);\n      return true;\n    }\n\n    if (name === '' || number === '') {\n      alert('Please enter something');\n      return true;\n    }\n  };\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    setName('');\n    setNumber('');\n\n    if (contactMatching()) {\n      return;\n    }\n    onSubmit(name, number);\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSubmitForm}>\n      <label className={s.formLabel}>\n        Name\n        <input\n          className={s.formInput}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"John Doe\"\n          value={name}\n          onChange={e => setName(e.currentTarget.value)}\n        ></input>\n      </label>\n      <label className={s.formLabel}>\n        Number\n        <PhoneInput\n          country={'us'}\n          name=\"number\"\n          value={number}\n          onChange={setNumber}\n        />\n      </label>\n      <button className={s.addBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleNameChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   onSubmitForm = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n//   render() {\n//     return (\n//       <form className={s.form} onSubmit={this.onSubmitForm}>\n//         <label className={s.formLabel} htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             className={s.formInput}\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder = \"John Doe\"\n//             value={this.state.name}\n//             onChange={this.handleNameChange}\n//             id={this.nameInputId}\n//           ></input>\n//         </label>\n//         <label className={s.formLabel} htmlFor={this.numberInputId}>\n//           Number\n//           <input\n//             className={s.formInput}\n//             type=\"phone\"\n//             name=\"number\"\n//             placeholder=\"111-11-11\"\n//             value={this.state.number}\n//             onChange={this.handleNameChange}\n//             id={this.numberInputId}\n//           ></input>\n//         </label>\n//         <button className={s.addBtn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/phonebook-selectors';\nimport * as phonebookActions from '../../redux/phonebook-actions';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(phonebookActions.changeFilter(e.target.value));\n\n  return (\n    <label className={s.filterLabel}>\n      Search contact\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts, getLoader } from './redux/phonebook-selectors';\nimport * as phonebookOperations from './redux/phonebook-operations';\nimport Container from './components/Container/Container';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const firstRender = useRef(true);\n  const onFirstLoad = () => dispatch(phonebookOperations.fetchContacts());\n  const loader = useSelector(getLoader);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      onFirstLoad();\n\n      firstRender.current = false;\n      return;\n    }\n  }, []);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {loader && <p>Loading...</p>}\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevState, prevProps) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const { contacts } = this.state;\n\n//     if (\n//       contacts.find(\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\n//       )\n//     ) {\n//       alert(`${name} is already in contacts.`);\n//     } else if (contacts.find(contact => contact.number === number)) {\n//       alert(`${number} is already in contacts.`);\n//     } else if (name.trim() === '' || number.trim() === '') {\n//       alert(\"Enter the contact's name and number phone!\");\n//     } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\n//       alert('Enter the correct number phone!');\n//     } else {\n//       this.setState(({ contacts }) => ({\n//         contacts: [contact, ...contacts],\n//       }));\n//     }\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   formSubmitHandler = data => {\n//     console.log(data);\n//   };\n\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const { contacts, filter } = this.state;\n//     const filteredContacts = this.getFilteredContacts();\n\n//     return (\n//       <Container>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} contacts={contacts} />\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onChange={this.changeFilter} />\n//         <ContactList\n//           contacts={filteredContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </Container>\n//     );\n//   }\n// }\n// export default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n   fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n  deleteContactError,\n  changeFilter\n} from './phonebook-actions';\n\n\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (state, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n   [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n   [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n\n}\n)\n\nexport default combineReducers({\n  items,\n  filter,\n  loading\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {   \n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport phonebookReducer from './phonebook-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n\n\nexport const store = configureStore({\n  reducer: {\n    contacts: phonebookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// export const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}